// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package service

//go:generate minimock -i route256.ozon.ru/project/cart/internal/service.LomsClient -o loms_client_mock_test.go -n LomsClientMock -p service

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"route256.ozon.ru/project/cart/internal/entity"
)

// LomsClientMock implements LomsClient
type LomsClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcOrderCreate          func(ctx context.Context, userID int64, itemList *entity.ListItems) (i1 int64, err error)
	inspectFuncOrderCreate   func(ctx context.Context, userID int64, itemList *entity.ListItems)
	afterOrderCreateCounter  uint64
	beforeOrderCreateCounter uint64
	OrderCreateMock          mLomsClientMockOrderCreate

	funcStocksInfo          func(ctx context.Context, sku uint32) (u1 uint16, err error)
	inspectFuncStocksInfo   func(ctx context.Context, sku uint32)
	afterStocksInfoCounter  uint64
	beforeStocksInfoCounter uint64
	StocksInfoMock          mLomsClientMockStocksInfo
}

// NewLomsClientMock returns a mock for LomsClient
func NewLomsClientMock(t minimock.Tester) *LomsClientMock {
	m := &LomsClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.OrderCreateMock = mLomsClientMockOrderCreate{mock: m}
	m.OrderCreateMock.callArgs = []*LomsClientMockOrderCreateParams{}

	m.StocksInfoMock = mLomsClientMockStocksInfo{mock: m}
	m.StocksInfoMock.callArgs = []*LomsClientMockStocksInfoParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mLomsClientMockOrderCreate struct {
	mock               *LomsClientMock
	defaultExpectation *LomsClientMockOrderCreateExpectation
	expectations       []*LomsClientMockOrderCreateExpectation

	callArgs []*LomsClientMockOrderCreateParams
	mutex    sync.RWMutex
}

// LomsClientMockOrderCreateExpectation specifies expectation struct of the LomsClient.OrderCreate
type LomsClientMockOrderCreateExpectation struct {
	mock    *LomsClientMock
	params  *LomsClientMockOrderCreateParams
	results *LomsClientMockOrderCreateResults
	Counter uint64
}

// LomsClientMockOrderCreateParams contains parameters of the LomsClient.OrderCreate
type LomsClientMockOrderCreateParams struct {
	ctx      context.Context
	userID   int64
	itemList *entity.ListItems
}

// LomsClientMockOrderCreateResults contains results of the LomsClient.OrderCreate
type LomsClientMockOrderCreateResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for LomsClient.OrderCreate
func (mmOrderCreate *mLomsClientMockOrderCreate) Expect(ctx context.Context, userID int64, itemList *entity.ListItems) *mLomsClientMockOrderCreate {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("LomsClientMock.OrderCreate mock is already set by Set")
	}

	if mmOrderCreate.defaultExpectation == nil {
		mmOrderCreate.defaultExpectation = &LomsClientMockOrderCreateExpectation{}
	}

	mmOrderCreate.defaultExpectation.params = &LomsClientMockOrderCreateParams{ctx, userID, itemList}
	for _, e := range mmOrderCreate.expectations {
		if minimock.Equal(e.params, mmOrderCreate.defaultExpectation.params) {
			mmOrderCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOrderCreate.defaultExpectation.params)
		}
	}

	return mmOrderCreate
}

// Inspect accepts an inspector function that has same arguments as the LomsClient.OrderCreate
func (mmOrderCreate *mLomsClientMockOrderCreate) Inspect(f func(ctx context.Context, userID int64, itemList *entity.ListItems)) *mLomsClientMockOrderCreate {
	if mmOrderCreate.mock.inspectFuncOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("Inspect function is already set for LomsClientMock.OrderCreate")
	}

	mmOrderCreate.mock.inspectFuncOrderCreate = f

	return mmOrderCreate
}

// Return sets up results that will be returned by LomsClient.OrderCreate
func (mmOrderCreate *mLomsClientMockOrderCreate) Return(i1 int64, err error) *LomsClientMock {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("LomsClientMock.OrderCreate mock is already set by Set")
	}

	if mmOrderCreate.defaultExpectation == nil {
		mmOrderCreate.defaultExpectation = &LomsClientMockOrderCreateExpectation{mock: mmOrderCreate.mock}
	}
	mmOrderCreate.defaultExpectation.results = &LomsClientMockOrderCreateResults{i1, err}
	return mmOrderCreate.mock
}

// Set uses given function f to mock the LomsClient.OrderCreate method
func (mmOrderCreate *mLomsClientMockOrderCreate) Set(f func(ctx context.Context, userID int64, itemList *entity.ListItems) (i1 int64, err error)) *LomsClientMock {
	if mmOrderCreate.defaultExpectation != nil {
		mmOrderCreate.mock.t.Fatalf("Default expectation is already set for the LomsClient.OrderCreate method")
	}

	if len(mmOrderCreate.expectations) > 0 {
		mmOrderCreate.mock.t.Fatalf("Some expectations are already set for the LomsClient.OrderCreate method")
	}

	mmOrderCreate.mock.funcOrderCreate = f
	return mmOrderCreate.mock
}

// When sets expectation for the LomsClient.OrderCreate which will trigger the result defined by the following
// Then helper
func (mmOrderCreate *mLomsClientMockOrderCreate) When(ctx context.Context, userID int64, itemList *entity.ListItems) *LomsClientMockOrderCreateExpectation {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("LomsClientMock.OrderCreate mock is already set by Set")
	}

	expectation := &LomsClientMockOrderCreateExpectation{
		mock:   mmOrderCreate.mock,
		params: &LomsClientMockOrderCreateParams{ctx, userID, itemList},
	}
	mmOrderCreate.expectations = append(mmOrderCreate.expectations, expectation)
	return expectation
}

// Then sets up LomsClient.OrderCreate return parameters for the expectation previously defined by the When method
func (e *LomsClientMockOrderCreateExpectation) Then(i1 int64, err error) *LomsClientMock {
	e.results = &LomsClientMockOrderCreateResults{i1, err}
	return e.mock
}

// OrderCreate implements LomsClient
func (mmOrderCreate *LomsClientMock) OrderCreate(ctx context.Context, userID int64, itemList *entity.ListItems) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmOrderCreate.beforeOrderCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmOrderCreate.afterOrderCreateCounter, 1)

	if mmOrderCreate.inspectFuncOrderCreate != nil {
		mmOrderCreate.inspectFuncOrderCreate(ctx, userID, itemList)
	}

	mm_params := LomsClientMockOrderCreateParams{ctx, userID, itemList}

	// Record call args
	mmOrderCreate.OrderCreateMock.mutex.Lock()
	mmOrderCreate.OrderCreateMock.callArgs = append(mmOrderCreate.OrderCreateMock.callArgs, &mm_params)
	mmOrderCreate.OrderCreateMock.mutex.Unlock()

	for _, e := range mmOrderCreate.OrderCreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmOrderCreate.OrderCreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOrderCreate.OrderCreateMock.defaultExpectation.Counter, 1)
		mm_want := mmOrderCreate.OrderCreateMock.defaultExpectation.params
		mm_got := LomsClientMockOrderCreateParams{ctx, userID, itemList}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmOrderCreate.t.Errorf("LomsClientMock.OrderCreate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmOrderCreate.OrderCreateMock.defaultExpectation.results
		if mm_results == nil {
			mmOrderCreate.t.Fatal("No results are set for the LomsClientMock.OrderCreate")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmOrderCreate.funcOrderCreate != nil {
		return mmOrderCreate.funcOrderCreate(ctx, userID, itemList)
	}
	mmOrderCreate.t.Fatalf("Unexpected call to LomsClientMock.OrderCreate. %v %v %v", ctx, userID, itemList)
	return
}

// OrderCreateAfterCounter returns a count of finished LomsClientMock.OrderCreate invocations
func (mmOrderCreate *LomsClientMock) OrderCreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderCreate.afterOrderCreateCounter)
}

// OrderCreateBeforeCounter returns a count of LomsClientMock.OrderCreate invocations
func (mmOrderCreate *LomsClientMock) OrderCreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderCreate.beforeOrderCreateCounter)
}

// Calls returns a list of arguments used in each call to LomsClientMock.OrderCreate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOrderCreate *mLomsClientMockOrderCreate) Calls() []*LomsClientMockOrderCreateParams {
	mmOrderCreate.mutex.RLock()

	argCopy := make([]*LomsClientMockOrderCreateParams, len(mmOrderCreate.callArgs))
	copy(argCopy, mmOrderCreate.callArgs)

	mmOrderCreate.mutex.RUnlock()

	return argCopy
}

// MinimockOrderCreateDone returns true if the count of the OrderCreate invocations corresponds
// the number of defined expectations
func (m *LomsClientMock) MinimockOrderCreateDone() bool {
	for _, e := range m.OrderCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.OrderCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterOrderCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderCreate != nil && mm_atomic.LoadUint64(&m.afterOrderCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockOrderCreateInspect logs each unmet expectation
func (m *LomsClientMock) MinimockOrderCreateInspect() {
	for _, e := range m.OrderCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsClientMock.OrderCreate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.OrderCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterOrderCreateCounter) < 1 {
		if m.OrderCreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LomsClientMock.OrderCreate")
		} else {
			m.t.Errorf("Expected call to LomsClientMock.OrderCreate with params: %#v", *m.OrderCreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderCreate != nil && mm_atomic.LoadUint64(&m.afterOrderCreateCounter) < 1 {
		m.t.Error("Expected call to LomsClientMock.OrderCreate")
	}
}

type mLomsClientMockStocksInfo struct {
	mock               *LomsClientMock
	defaultExpectation *LomsClientMockStocksInfoExpectation
	expectations       []*LomsClientMockStocksInfoExpectation

	callArgs []*LomsClientMockStocksInfoParams
	mutex    sync.RWMutex
}

// LomsClientMockStocksInfoExpectation specifies expectation struct of the LomsClient.StocksInfo
type LomsClientMockStocksInfoExpectation struct {
	mock    *LomsClientMock
	params  *LomsClientMockStocksInfoParams
	results *LomsClientMockStocksInfoResults
	Counter uint64
}

// LomsClientMockStocksInfoParams contains parameters of the LomsClient.StocksInfo
type LomsClientMockStocksInfoParams struct {
	ctx context.Context
	sku uint32
}

// LomsClientMockStocksInfoResults contains results of the LomsClient.StocksInfo
type LomsClientMockStocksInfoResults struct {
	u1  uint16
	err error
}

// Expect sets up expected params for LomsClient.StocksInfo
func (mmStocksInfo *mLomsClientMockStocksInfo) Expect(ctx context.Context, sku uint32) *mLomsClientMockStocksInfo {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("LomsClientMock.StocksInfo mock is already set by Set")
	}

	if mmStocksInfo.defaultExpectation == nil {
		mmStocksInfo.defaultExpectation = &LomsClientMockStocksInfoExpectation{}
	}

	mmStocksInfo.defaultExpectation.params = &LomsClientMockStocksInfoParams{ctx, sku}
	for _, e := range mmStocksInfo.expectations {
		if minimock.Equal(e.params, mmStocksInfo.defaultExpectation.params) {
			mmStocksInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStocksInfo.defaultExpectation.params)
		}
	}

	return mmStocksInfo
}

// Inspect accepts an inspector function that has same arguments as the LomsClient.StocksInfo
func (mmStocksInfo *mLomsClientMockStocksInfo) Inspect(f func(ctx context.Context, sku uint32)) *mLomsClientMockStocksInfo {
	if mmStocksInfo.mock.inspectFuncStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("Inspect function is already set for LomsClientMock.StocksInfo")
	}

	mmStocksInfo.mock.inspectFuncStocksInfo = f

	return mmStocksInfo
}

// Return sets up results that will be returned by LomsClient.StocksInfo
func (mmStocksInfo *mLomsClientMockStocksInfo) Return(u1 uint16, err error) *LomsClientMock {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("LomsClientMock.StocksInfo mock is already set by Set")
	}

	if mmStocksInfo.defaultExpectation == nil {
		mmStocksInfo.defaultExpectation = &LomsClientMockStocksInfoExpectation{mock: mmStocksInfo.mock}
	}
	mmStocksInfo.defaultExpectation.results = &LomsClientMockStocksInfoResults{u1, err}
	return mmStocksInfo.mock
}

// Set uses given function f to mock the LomsClient.StocksInfo method
func (mmStocksInfo *mLomsClientMockStocksInfo) Set(f func(ctx context.Context, sku uint32) (u1 uint16, err error)) *LomsClientMock {
	if mmStocksInfo.defaultExpectation != nil {
		mmStocksInfo.mock.t.Fatalf("Default expectation is already set for the LomsClient.StocksInfo method")
	}

	if len(mmStocksInfo.expectations) > 0 {
		mmStocksInfo.mock.t.Fatalf("Some expectations are already set for the LomsClient.StocksInfo method")
	}

	mmStocksInfo.mock.funcStocksInfo = f
	return mmStocksInfo.mock
}

// When sets expectation for the LomsClient.StocksInfo which will trigger the result defined by the following
// Then helper
func (mmStocksInfo *mLomsClientMockStocksInfo) When(ctx context.Context, sku uint32) *LomsClientMockStocksInfoExpectation {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("LomsClientMock.StocksInfo mock is already set by Set")
	}

	expectation := &LomsClientMockStocksInfoExpectation{
		mock:   mmStocksInfo.mock,
		params: &LomsClientMockStocksInfoParams{ctx, sku},
	}
	mmStocksInfo.expectations = append(mmStocksInfo.expectations, expectation)
	return expectation
}

// Then sets up LomsClient.StocksInfo return parameters for the expectation previously defined by the When method
func (e *LomsClientMockStocksInfoExpectation) Then(u1 uint16, err error) *LomsClientMock {
	e.results = &LomsClientMockStocksInfoResults{u1, err}
	return e.mock
}

// StocksInfo implements LomsClient
func (mmStocksInfo *LomsClientMock) StocksInfo(ctx context.Context, sku uint32) (u1 uint16, err error) {
	mm_atomic.AddUint64(&mmStocksInfo.beforeStocksInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmStocksInfo.afterStocksInfoCounter, 1)

	if mmStocksInfo.inspectFuncStocksInfo != nil {
		mmStocksInfo.inspectFuncStocksInfo(ctx, sku)
	}

	mm_params := LomsClientMockStocksInfoParams{ctx, sku}

	// Record call args
	mmStocksInfo.StocksInfoMock.mutex.Lock()
	mmStocksInfo.StocksInfoMock.callArgs = append(mmStocksInfo.StocksInfoMock.callArgs, &mm_params)
	mmStocksInfo.StocksInfoMock.mutex.Unlock()

	for _, e := range mmStocksInfo.StocksInfoMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmStocksInfo.StocksInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStocksInfo.StocksInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmStocksInfo.StocksInfoMock.defaultExpectation.params
		mm_got := LomsClientMockStocksInfoParams{ctx, sku}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStocksInfo.t.Errorf("LomsClientMock.StocksInfo got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStocksInfo.StocksInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmStocksInfo.t.Fatal("No results are set for the LomsClientMock.StocksInfo")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmStocksInfo.funcStocksInfo != nil {
		return mmStocksInfo.funcStocksInfo(ctx, sku)
	}
	mmStocksInfo.t.Fatalf("Unexpected call to LomsClientMock.StocksInfo. %v %v", ctx, sku)
	return
}

// StocksInfoAfterCounter returns a count of finished LomsClientMock.StocksInfo invocations
func (mmStocksInfo *LomsClientMock) StocksInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStocksInfo.afterStocksInfoCounter)
}

// StocksInfoBeforeCounter returns a count of LomsClientMock.StocksInfo invocations
func (mmStocksInfo *LomsClientMock) StocksInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStocksInfo.beforeStocksInfoCounter)
}

// Calls returns a list of arguments used in each call to LomsClientMock.StocksInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStocksInfo *mLomsClientMockStocksInfo) Calls() []*LomsClientMockStocksInfoParams {
	mmStocksInfo.mutex.RLock()

	argCopy := make([]*LomsClientMockStocksInfoParams, len(mmStocksInfo.callArgs))
	copy(argCopy, mmStocksInfo.callArgs)

	mmStocksInfo.mutex.RUnlock()

	return argCopy
}

// MinimockStocksInfoDone returns true if the count of the StocksInfo invocations corresponds
// the number of defined expectations
func (m *LomsClientMock) MinimockStocksInfoDone() bool {
	for _, e := range m.StocksInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StocksInfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStocksInfoCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStocksInfo != nil && mm_atomic.LoadUint64(&m.afterStocksInfoCounter) < 1 {
		return false
	}
	return true
}

// MinimockStocksInfoInspect logs each unmet expectation
func (m *LomsClientMock) MinimockStocksInfoInspect() {
	for _, e := range m.StocksInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsClientMock.StocksInfo with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StocksInfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStocksInfoCounter) < 1 {
		if m.StocksInfoMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LomsClientMock.StocksInfo")
		} else {
			m.t.Errorf("Expected call to LomsClientMock.StocksInfo with params: %#v", *m.StocksInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStocksInfo != nil && mm_atomic.LoadUint64(&m.afterStocksInfoCounter) < 1 {
		m.t.Error("Expected call to LomsClientMock.StocksInfo")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LomsClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockOrderCreateInspect()

			m.MinimockStocksInfoInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LomsClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LomsClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockOrderCreateDone() &&
		m.MinimockStocksInfoDone()
}
