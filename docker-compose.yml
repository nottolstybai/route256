version: "3.8"

x-postgres-common: &postgres-common
  image: postgres:14-alpine
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U user --dbname=postgres'
    interval: 10s
    timeout: 5s
    retries: 5

services:
  cart:
    build: ./cart/
    command: /bin/sh -c "/go/bin/cart"
    container_name: cart
    ports:
      - "8082:8080"
    environment:
      - CART_HOST_ADDR=0.0.0.0:8080
      - PRODUCT_SERVICE_TOKEN=testtoken
      - PRODUCT_SERVICE_HOST=http://route256.pavl.uk:8080
      - LOMS_SERVICE_HOST=loms:50051
    depends_on:
      loms:
        condition: service_started

  loms:
    build: ./loms/
    user: root
    command: /bin/sh -c "/go/bin/loms"
    container_name: loms
    ports:
      - "50051:50051"
      - "3000:3000"
    environment:
      - LOMS_HOST_ADDR=0.0.0.0:50051
      - LOMS_GATEWAY_ADDR=0.0.0.0:3000
      - RESOURCES_PATH=/resources
      - POSTGRES_MASTER_CONN_STR=postgres://user:password@postgres_primary:5432/postgres
      - POSTGRES_REPLICA_CONN_STR=postgres://user:password@postgres_replica:5432/postgres
      - BOOTSTRAP_SERVER=kafka:9092
      - KAFKA_TOPIC=loms.order-events
    volumes:
      - ./loms/resources:/resources/
      - ./loms/swagger-ui:/swagger/swagger-ui
      - ./loms/api/openapiv2/loms.swagger.json:/swagger/loms.swagger.json
    depends_on:
      postgres_replica:
        condition: service_healthy

  swagger-ui:
    image: swaggerapi/swagger-ui
    ports:
      - "8080:8080"
    environment:
      - SWAGGER_JSON=/swagger/loms.swagger.json
    volumes:
      - ./loms/api/openapiv2:/swagger

  postgres_primary:
    <<: *postgres-common
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres
      -c wal_level=replica
      -c hot_standby=on
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c hot_standby_feedback=on
    volumes:
      - ./loms/00_init.sql:/docker-entrypoint-initdb.d/00_init.sql

  postgres_replica:
    <<: *postgres-common
    ports:
      - "5433:5432"
    environment:
      PGUSER: replicator
      PGPASSWORD: replicator_password
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres_primary --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      - postgres_primary

  migrations:
    image: ghcr.io/kukymbr/goose-docker:3.19.2
    depends_on:
      postgres_primary:
        condition: service_started
    environment:
      - GOOSE_DRIVER=postgres
      - GOOSE_DBSTRING=host=postgres_primary port=5432 user=user password=password dbname=postgres
    volumes:
      - ./loms/migrations:/migrations


  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      DYNAMIC_CONFIG_ENABLED: "true"

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.2.1.amd64
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
    volumes:
      - ./loms/run_workaround.sh:/tmp/run_workaround.sh
    command: "bash -c '/tmp/run_workaround.sh && /etc/confluent/docker/run'"

  kafka-init-topics:
    container_name: init-topics
    image: confluentinc/cp-kafka:7.2.1.amd64
    depends_on:
      - kafka
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
      cub kafka-ready -b kafka:29092 1 30 && \
      kafka-topics --create --topic loms.order-events --partitions 2 --replication-factor 1 --if-not-exists --bootstrap-server kafka:29092'"

  notifier-1:
    container_name: notifier-1
    image: notifier
    build: ./notifier
    command: /bin/sh -c "/go/bin/notifier"
    environment:
      - KAFKA_BOOTSTRAP=kafka:9092
      - KAFKA_TOPICS=loms.order-events
      - KAFKA_GROUP_ID=notify
    depends_on:
      kafka-init-topics:
        condition: service_completed_successfully

  notifier-2:
    container_name: notifier-2
    image: notifier
    build: ./notifier
    command: /bin/sh -c "/go/bin/notifier"
    environment:
      - KAFKA_BOOTSTRAP=kafka:9092
      - KAFKA_TOPICS=loms.order-events
      - KAFKA_GROUP_ID=notify
    depends_on:
      kafka-init-topics:
        condition: service_completed_successfully

  notifier-3:
    container_name: notifier-3
    image: notifier
    build: ./notifier
    command: /bin/sh -c "/go/bin/notifier"
    environment:
      - KAFKA_BOOTSTRAP=kafka:9092
      - KAFKA_TOPICS=loms.order-events
      - KAFKA_GROUP_ID=notify
    depends_on:
      kafka-init-topics:
        condition: service_completed_successfully

  prometheus:
    image: prom/prometheus:v2.36.2
    container_name: prometheus
    volumes:
      - ./observability/prometheus/:/etc/prometheus/
#      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:${JAEGER_VERSION:-latest}
    ports:
      - "14268:14268"
      - "16686:16686"
      - "4318:4318"


  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - "3001:3000"
    volumes:
      - ./observability/grafana/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./observability/grafana/datasources/:/etc/grafana/provisioning/datasources/
      - ./observability/grafana/dashboards:/var/lib/grafana/dashboards