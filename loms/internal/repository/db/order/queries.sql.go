// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package order

import (
	"context"
)

const addOrder = `-- name: AddOrder :exec
INSERT INTO "order" (order_id, user_id, status)
VALUES ($1, $2, $3)
`

type AddOrderParams struct {
	OrderID int32
	UserID  int32
	Status  int32
}

func (q *Queries) AddOrder(ctx context.Context, arg AddOrderParams) error {
	_, err := q.db.Exec(ctx, addOrder, arg.OrderID, arg.UserID, arg.Status)
	return err
}

type AddOrderStockParams struct {
	OrderID int32
	SkuID   int32
	Count   int32
}

const getByOrderID = `-- name: GetByOrderID :many
select status, user_id, sku_id, count from "order"
join order_stock os on "order".order_id = os.order_id
where os.order_id=$1
`

type GetByOrderIDRow struct {
	Status int32
	UserID int32
	SkuID  int32
	Count  int32
}

func (q *Queries) GetByOrderID(ctx context.Context, orderID int32) ([]GetByOrderIDRow, error) {
	rows, err := q.db.Query(ctx, getByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetByOrderIDRow
	for rows.Next() {
		var i GetByOrderIDRow
		if err := rows.Scan(
			&i.Status,
			&i.UserID,
			&i.SkuID,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setStatusByOrderID = `-- name: SetStatusByOrderID :exec
update "order"
set status=$1
where order_id=$2
`

type SetStatusByOrderIDParams struct {
	Status  int32
	OrderID int32
}

func (q *Queries) SetStatusByOrderID(ctx context.Context, arg SetStatusByOrderIDParams) error {
	_, err := q.db.Exec(ctx, setStatusByOrderID, arg.Status, arg.OrderID)
	return err
}
