// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package outbox

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type EventStatus string

const (
	EventStatusNew  EventStatus = "new"
	EventStatusSent EventStatus = "sent"
)

func (e *EventStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventStatus(s)
	case string:
		*e = EventStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for EventStatus: %T", src)
	}
	return nil
}

type NullEventStatus struct {
	EventStatus EventStatus
	Valid       bool // Valid is true if EventStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventStatus) Scan(value interface{}) error {
	if value == nil {
		ns.EventStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventStatus), nil
}

type Order struct {
	OrderID int32
	UserID  int32
	Status  int32
}

type OrderStock struct {
	OrderID int32
	SkuID   int32
	Count   int32
}

type Outbox struct {
	ID           int32
	Orderid      int32
	OrderStatus  int32
	EventStatus  EventStatus
	DttmInserted pgtype.Timestamp
}

type Stock struct {
	Sku           int32
	TotalCount    int32
	ReservedCount int32
}
