// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package outbox

import (
	"context"
)

const createEvent = `-- name: CreateEvent :exec
insert into outbox (orderID, order_status, event_status)
values ($1, $2, 'new')
`

type CreateEventParams struct {
	Orderid     int32
	OrderStatus int32
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.Exec(ctx, createEvent, arg.Orderid, arg.OrderStatus)
	return err
}

const getNextEvent = `-- name: GetNextEvent :one
select id, orderid, order_status, event_status, dttm_inserted from outbox
where event_status='new'
order by dttm_inserted
limit 1
`

func (q *Queries) GetNextEvent(ctx context.Context) (Outbox, error) {
	row := q.db.QueryRow(ctx, getNextEvent)
	var i Outbox
	err := row.Scan(
		&i.ID,
		&i.Orderid,
		&i.OrderStatus,
		&i.EventStatus,
		&i.DttmInserted,
	)
	return i, err
}

const markEventAsSent = `-- name: MarkEventAsSent :exec
update outbox
set event_status='sent'
where id=$1
`

func (q *Queries) MarkEventAsSent(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, markEventAsSent, id)
	return err
}
